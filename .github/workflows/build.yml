name: Update AUR

on:
  repository_dispatch:
    types: [update-aur]
  workflow_dispatch:

jobs:
  update-package:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
      - name: Install base dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm --needed base-devel git openssh jq curl sudo

      - name: Create non-root user for makepkg
        run: |
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: /usr/bin/makepkg" > /etc/sudoers.d/builder
          mkdir -p /home/builder/workdir
          chown -R builder:builder /home/builder

      - name: Configure Git globally
        run: |
          git config --global user.email "contact@burhanverse.eu.org"
          git config --global user.name "Burhanverse"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

#      - name: Setup SSH
#        uses: shimataro/ssh-key-action@v2
#        with:
#          key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
#          known_hosts: ${{ secrets.AUR_KNOWN_HOSTS }}
#          if_key_exists: replace

      - name: Check for new release
        id: check_release
        run: |
          set -e
          LATEST_TAG=$(curl -s https://api.github.com/repos/FajoX1/fagramdesktop/releases/latest | jq -r .tag_name)
          echo "Latest tag: $LATEST_TAG"
          
          # Strip the 'v' prefix for version comparison
          LATEST_VERSION=${LATEST_TAG#v}
          echo "Latest version (without v): $LATEST_VERSION"
          
          CURRENT_VERSION=$(grep -oP 'pkgver=\K.*' PKGBUILD | tr -d '"')
          echo "Current version: $CURRENT_VERSION"
          
          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          else
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update package and push to AUR
        if: steps.check_release.outputs.update_needed == 'true'
        run: |
          set -e
          NEW_VERSION=${{ steps.check_release.outputs.latest_version }}
          TAG_VERSION=${{ steps.check_release.outputs.latest_tag }}
          
          # Ensure working directory is owned by builder
          chown -R builder:builder "$GITHUB_WORKSPACE"
          
          # Update PKGBUILD with version without 'v' prefix
          sed -i "s/pkgver=.*/pkgver=$NEW_VERSION/" PKGBUILD
          #sed -i "s/pkgrel=.*/pkgrel=1/" PKGBUILD
          
          # Download source and calculate SHA256
          rm -rf pkg src *.tar.gz
          TAR_URL="https://github.com/burhancodes/fagram-rpm/releases/download/${TAG_VERSION}/fagram-${TAG_VERSION}.tar.gz"
          curl -L "$TAR_URL" -o "fagram-${TAG_VERSION}.tar.gz" || { echo "Download failed"; exit 1; }
          CHECKSUM=$(sha256sum "fagram-${TAG_VERSION}.tar.gz" | awk '{print $1}')
          sed -i "s/sha256sums=('.*')/sha256sums=('$CHECKSUM')/" PKGBUILD
          
          # Generate .SRCINFO as non-root user in the current directory
          sudo -u builder bash -c "cd \"$PWD\" && makepkg --printsrcinfo > .SRCINFO" || { echo "Failed to generate .SRCINFO"; exit 1; }
          
          # Commit changes to main repository
          git add PKGBUILD .SRCINFO
          git commit -m "Update PKGBUILD and .SRCINFO to $NEW_VERSION"
          git push origin main
